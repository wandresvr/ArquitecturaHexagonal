plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'maven-publish'
	id "org.sonarqube" version "4.4.1.3373"
	

}

group = 'com.itm.edu'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://jitpack.io' }
	mavenCentral()
	mavenLocal() 
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// RabbitMQ
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.amqp:spring-rabbit:3.1.1'
	
	// Database
	implementation 'org.postgresql:postgresql:42.7.1'
	
	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	
	// Jackson para JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	
	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
	testImplementation 'org.mockito:mockito-core:5.3.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'

	implementation('com.github.wandresvr:ArquitecturaHexagonal:v1.0.4') {
		changing = true
	}

	// SpringDoc OpenAPI (Swagger)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'

	// Jackson
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate6:2.16.1'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.9"
}

def sonarProperties = new Properties()
file("sonar.properties").withInputStream { sonarProperties.load(it) }

sonar {
	properties {
		property "sonar.projectKey", "order-service-itm"
		property "sonar.projectName", "Microservicio de Ordenes ITM"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", sonarProperties.getProperty("sonar.token")
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property "sonar.java.binaries", "build/classes/java/main"
		property "sonar.java.test.binaries", "build/classes/java/test"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/coverage/jacocoTestReport.xml"
		property "sonar.gradle.skipCompile", "true"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.scm.disabled", "true"
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml {
			required = true
			destination = file("${project.projectDir}/coverage/jacocoTestReport.xml")
		}
		html {
			required = true
			destination = file("${project.projectDir}/coverage/html")
		}
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/dto/**',
				'**/exception/**',
				'**/OrderApplication.class'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
